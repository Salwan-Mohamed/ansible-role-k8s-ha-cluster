---
# Configure Kubernetes control plane

- name: Prepare kubeadm configuration file on first master
  template:
    src: kubeadm-config.yaml.j2
    dest: ~/kubeadm-config.yaml
    mode: 0644
  when: inventory_hostname == groups['control_plane'][0]

- name: Initialize Kubernetes control plane on first master
  command: kubeadm init --config=~/kubeadm-config.yaml --upload-certs
  register: kubeadm_init
  when: inventory_hostname == groups['control_plane'][0]
  args:
    creates: /etc/kubernetes/admin.conf

- name: Store kubeadm join command for control plane nodes
  set_fact:
    control_plane_join_command: "{{ kubeadm_init.stdout | regex_search('\\s*kubeadm join.*--control-plane.*') }}"
  when: 
    - inventory_hostname == groups['control_plane'][0]
    - kubeadm_init.stdout is defined

- name: Store kubeadm join command for worker nodes
  set_fact:
    worker_join_command: "{{ kubeadm_init.stdout | regex_search('\\s*kubeadm join.*discovery-token.*') | regex_replace('--control-plane.*$', '') }}"
  when: 
    - inventory_hostname == groups['control_plane'][0]
    - kubeadm_init.stdout is defined

- name: Create .kube directory for user
  file:
    path: ~/.kube
    state: directory
    mode: 0755
  when: inventory_hostname in groups['control_plane']

- name: Copy admin.conf to user's .kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    mode: 0644
    remote_src: yes
  when: inventory_hostname in groups['control_plane']
  register: copy_kubeconfig

- name: Set ownership to current user for .kube/config
  file:
    path: ~/.kube/config
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: 0600
  when: 
    - inventory_hostname in groups['control_plane']
    - copy_kubeconfig.changed

- name: Install Calico CNI plugin
  command: kubectl apply -f {{ kubernetes_cni_plugin_url }}
  when: inventory_hostname == groups['control_plane'][0]
  changed_when: false

- name: Join additional control plane nodes to the cluster
  shell: |
    {{ hostvars[groups['control_plane'][0]].control_plane_join_command }} \
    --apiserver-advertise-address={{ hostvars[inventory_hostname].ansible_host }}
  args:
    creates: /etc/kubernetes/kubelet.conf
  when: 
    - inventory_hostname in groups['control_plane']
    - inventory_hostname != groups['control_plane'][0]
    - hostvars[groups['control_plane'][0]].control_plane_join_command is defined

- name: Install metrics-server
  command: kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/high-availability.yaml
  when: 
    - inventory_hostname == groups['control_plane'][0]
    - install_metrics_server | bool
  changed_when: false

- name: Enable aggregator routing for metrics-server
  lineinfile:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
    line: "    - --enable-aggregator-routing=true"
    insertafter: "    - kube-apiserver"
    state: present
  when: inventory_hostname in groups['control_plane']

- name: Create admin service account
  command: kubectl create serviceaccount {{ admin_service_account }}
  register: create_sa
  failed_when: 
    - create_sa.rc != 0 
    - "'already exists' not in create_sa.stderr"
  changed_when: create_sa.rc == 0
  when: 
    - inventory_hostname == groups['control_plane'][0]
    - create_admin_account | bool

- name: Create cluster role binding for admin account
  command: kubectl create clusterrolebinding {{ admin_service_account }} --clusterrole=cluster-admin --serviceaccount=default:{{ admin_service_account }}
  register: create_crb
  failed_when: 
    - create_crb.rc != 0 
    - "'already exists' not in create_crb.stderr"
  changed_when: create_crb.rc == 0
  when: 
    - inventory_hostname == groups['control_plane'][0]
    - create_admin_account | bool

- name: Install Helm package manager
  block:
    - name: Download Helm installation script
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: 0755

    - name: Execute Helm installation script
      command: /tmp/get_helm.sh
      args:
        creates: /usr/local/bin/helm
  when: 
    - inventory_hostname == groups['control_plane'][0]
    - install_helm | bool
